<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.easyse.easyse_simple.mapper.kafkaservice.MessageMapper">

    <resultMap id="BaseResultMap" type="com.easyse.easyse_simple.pojo.DO.person.Message">
            <id property="id" column="id" jdbcType="BIGINT"/>
            <result property="fromId" column="from_id" jdbcType="INTEGER"/>
            <result property="toId" column="to_id" jdbcType="INTEGER"/>
            <result property="conversationId" column="conversation_id" jdbcType="VARCHAR"/>
            <result property="content" column="content" jdbcType="VARCHAR"/>
            <result property="status" column="status" jdbcType="TINYINT"/>
            <result property="isDeleted" column="is_deleted" jdbcType="TINYINT"/>
            <result property="gmtCreate" column="gmt_create" jdbcType="TIMESTAMP"/>
            <result property="createBy" column="create_by" jdbcType="VARCHAR"/>
            <result property="gmtModified" column="gmt_modified" jdbcType="TIMESTAMP"/>
            <result property="updateBy" column="update_by" jdbcType="VARCHAR"/>
    </resultMap>

    <sql id="Base_Column_List">
        id,from_id,to_id,
        conversation_id,content,status,
        is_deleted,gmt_create,create_by,
        gmt_modified,update_by
    </sql>

    <!--查询当前用户的会话数量-->
    <select id="selectConversationCount" resultType="int">
        select count(m.maxid) from (
                                       select max(id) as maxid
                                       from person_message
                                       where is_deleted != 1
            and from_id != 0
            and (from_id = #{userId} or to_id = #{userId})
                                       group by conversation_id
                                   ) as m
    </select>

    <!--查询当前用户的会话列表（针对每个会话只返回一条最新的私信）-->
    <select id="selectConversations" resultType="com.easyse.easyse_simple.pojo.DO.person.Message">
        select <include refid="Base_Column_List"></include>
        from person_message
        where id in (
        select max(id)
        from person_message
        where is_deleted != 1
        and from_id != 0
        and (from_id = #{userId} or to_id = #{userId})
        group by conversation_id
        )
        order by id desc
        limit #{offset}, #{limit}
    </select>

    <!--查询某个会话所包含的私信列表-->
    <select id="selectLetters" resultType="com.easyse.easyse_simple.pojo.DO.person.Message">
        select <include refid="Base_Column_List"></include>
        from person_message
        where is_deleted != 0
        and from_id != 0
        and conversation_id = #{conversationId}
        order by id desc
        limit #{offset}, #{limit}
    </select>

    <!--查询某个会话所包含的私信数量-->
    <select id="selectLetterCount" resultType="int">
        select count(id)
        from person_message
        where is_deleted != 1
        and from_id != 0
        and conversation_id = #{conversationId}
    </select>

    <!--查询未读私信的数量-->
    <select id="selectLetterUnreadCount" resultType="int">
        select count(id)
        from person_message
        where is_deleted != 1
        and from_id != 1
        and to_id = #{userId}
        <if test="conversationId != null">
            and conversation_id = #{conversationId}
        </if>
    </select>

    <!--修改消息的状态-->
    <update id="updateStatus">
        update person_message
        set status = #{status}
        where id in
        <foreach collection="ids" item="id" open="(" separator="," close=")">
            #{id}
        </foreach>
    </update>

    <!--新增一条私信-->
    <insert id="insertMessage" parameterType="com.easyse.easyse_simple.pojo.DO.person.Message" keyProperty="id">
        insert into person_message(<include refid="Base_Column_List"></include>)
        values(#{fromId}, #{toId}, #{conversationId}, #{content}, #{status}, #{createTime})
    </insert>

    <!--查询某个主题下最新的系统通知-->
    <select id="selectLatestNotice" resultType="com.easyse.easyse_simple.pojo.DO.person.Message">
        select <include refid="Base_Column_List"></include>
        from person_message
        where id in (
        select max(id) from person_message
        where is_deleted != 1
        and from_id = 1
        and to_id = #{userId}
        and conversation_id = #{topic}
        )
    </select>

    <!--查询某个主题下包含的系统通知数量-->
    <select id="selectNoticeCount" resultType="int">
        select count(id)
        from person_message
        where is_deleted != 1
        and from_id = 1
        and to_id = #{userId}
          and conversation_id = #{topic}
    </select>

    <!--查询未读的系统通知数量-->
    <select id="selectNoticeUnReadCount" resultType="int">
        select count(id)
        from person_message
        where status = 0
        and from_id = 1
        and to_id = #{userId}
        <if test = "topic != null">
            and conversation_id = #{topic}
        </if>
    </select>

    <!--查询某个主题所包含的通知列表-->
    <select id="selectNotices" resultType="com.easyse.easyse_simple.pojo.DO.person.Message">
        select <include refid="Base_Column_List"></include>
        from person_message
        where is_deleted != 1
        and from_id = 1
        and to_id = #{userId}
        and conversation_id = #{topic}
        order by gmt_create desc
        limit #{offset}, #{limit}
    </select>

</mapper>
